import argparse
import csv
import pywikibot
from pywikibot.data import api
import pprint

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("transcript_file", help="the file, that contains the transcript information")
    parser.add_argument("strain_name", help="please type in the correct name of the strand")
    
    args = parser.parse_args()

    bab = BacterialAnnotationBot(args.transcript_file, args.strain_name)

    #bab.read_csv()

    strain = Strain(args.strain_name)

   # strain.show_strain_name()
   # strain.create_strain_name()
    strain.create_strain_item_candidates()
    strain.create_strain_item()

class BacterialAnnotationBot():

    def __init__(self, transcript_file, strain_name):
        self.transcript_file = transcript_file
        self.strain_name = strain_name

    def read_csv(self):
        transcript_file = self.transcript_file
        with open(transcript_file) as csvfile:
            transcript_dict = csv.DictReader(csvfile, delimiter="\t")
            for row in transcript_dict:
                site = pywikibot.Site("en", "TillsWiki")
                
    def create_new_item(self):

                data = {
                    'labels': {
                        'en': {
                            'language': 'en',
                            'value': row['Name']
                        }
                    },
                    'descriptions': {
                        'en': {
                            'language': 'en',
                            'value': 'bacterial transcript found in ' + self.strain_name
                        }
                    }
                }

                item = pywikibot.ItemPage(site)
                item.editEntity(data)

    def getItems(site, itemtitle):
        params = { 'action' :'wbsearchentities' , 'format' : 'json' , 'language' : 'en', 'type' : 'item', 'search': itemtitle}
        request = api.Request(site=site,**params)
        return request.submit()
                
                #print(row['strain'],"\n")
                #print(row)
class Strain():
    
    def __init__(self, strain_name):
        self.strain_name = strain_name
        self.site = pywikibot.Site("en", "TillsWiki")
    def show_strain_name(self):
        print(self.strain_name)

    def search_strain_name(self, site, strainname):
        params = { 'action' :'wbsearchentities' , 'format' : 'json' , 'language' : 'en', 'type' : 'item', 'search': strainname}
        request = api.Request(site=site,**params)
        return request.submit()    
     
    def create_strain_item_candidates(self):
        #site = pywikibot.Site("en", "TillsWiki")
        Strain_name_Entries = self.search_strain_name(self.site, self.strain_name)
        strain_items_with_matching_label = []
        self.strain_item_candidates = []
        for list_item in Strain_name_Entries['search']:
            if list_item['label'] == self.strain_name:
                strain_items_with_matching_label.append(list_item['id'])
            else:
                continue
        if strain_items_with_matching_label == []:
            print("there are no items with the exact name as your strain_name")
        else:
            print("items that match the strain name:", strain_items_with_matching_label)
        for ID in strain_items_with_matching_label:
            item = pywikibot.ItemPage(self.site, ID)
            item_id = item.getID()
            item_dict = item.get()
            claim_dict = item_dict['claims']
            #strain_item_candidates = []
            if claim_dict == {}:
                print("claim_dict of {} is empty".format(item_id))
            else:
                claim_list = claim_dict["P6"]
                if claim_list == claim_dict["P6"]: # P6:instance of
                    for claim in claim_list:
                        claim_target = claim.getTarget()
                        if claim_target.getID() == "Q6":   #Q6:strain
                            print("item {} with strain_name is instance of strain".format(item_id))
                            self.strain_item_candidates.append(ID)
                        else:
                            print("item {} with strain_name is no instance of strain".format(item_id))
                else:
                    print("item has no claim instance of")
                        #instance of strain
        if not self.strain_item_candidates:
            print("there are no strain item candidates")
        else:
            print("the strain_item candidates are: {}".format(self.strain_item_candidates))

    def create_strain_item(self):
        if self.strain_item_candidates == []:
            data = {
                'labels': {
                    'en': {
                        'language': 'en',
                        'value': self.strain_name
                    }
                },
                'descriptions': {
                    'en': {
                        'language': 'en',
                        'value': 'bacterial strain'
                    }
                }
            }

            item = pywikibot.ItemPage(self.site)
            item.editEntity(data)
            item_id = item.getID()
            
            claim = pywikibot.Claim(self.site, u'P6')
            target = pywikibot.ItemPage(self.site, u"Q6")
            claim.setTarget(target)
            item.addClaim(claim)

            print("created item {} for strain {}".format(item_id, self.strain_name))
            
    def return_strain_id(self):
        pass
        #claim = pywikibot.Claim(site, u'P6')
        #target = pywikibot.ItemPage(site, u"Q9")
        #claim.setTarget(target)
        #item.addClaim(claim)

    
                
main()
